// =============================================================================
// ERROR TEST CASES FOR RETURN STATEMENT PARSING
// =============================================================================
// This file contains various incorrectly written functions to test error handling
// in the Phi parser, specifically for return statements and function declarations.

// =============================================================================
// 1. MISSING SEMICOLON ERRORS
// =============================================================================

// Error: Missing semicolon after return expression
fun missing_semicolon() -> i32 {
    return 42
}

// Error: Missing semicolon after return with variable
fun missing_semicolon_var() -> i32 {
    return some_variable
}

// Error: Missing semicolon after return with float
fun missing_semicolon_float() -> f64 {
    return 3.14
}

// =============================================================================
// 2. INVALID EXPRESSIONS AFTER RETURN
// =============================================================================

// Error: Invalid token after return (using operator as expression)
fun invalid_return_expression1() -> i32 {
    return +;
}

// Error: Invalid token after return (using keyword as expression)
fun invalid_return_expression2() -> i32 {
    return if;
}

// Error: Invalid token after return (using punctuation as expression)
fun invalid_return_expression3() -> i32 {
    return {;
}

// Error: Invalid token after return (using string without quotes)
fun invalid_return_expression4() -> str {
    return hello_world;
}

// =============================================================================
// 3. FUNCTION STRUCTURE ERRORS
// =============================================================================

// Error: Missing function name
fun () -> i32 {
    return 42;
}

// Error: Invalid function name (using keyword)
fun return() -> i32 {
    return 42;
}

// Error: Invalid function name (using number)
fun 123invalid() -> i32 {
    return 42;
}

// Error: Missing opening parenthesis
fun missing_open_paren) -> i32 {
    return 42;
}

// Error: Missing closing parenthesis
fun missing_close_paren( -> i32 {
    return 42;
}

// Error: Missing opening brace
fun missing_open_brace() -> i32
    return 42;
}

// Error: Missing closing brace (EOF reached)
fun missing_close_brace() -> i32 {
    return 42;

// =============================================================================
// 4. INVALID RETURN TYPES
// =============================================================================

// Error: Invalid return type (using keyword)
fun invalid_return_type1() -> if {
    return 42;
}

// Error: Invalid return type (using operator)
fun invalid_return_type2() -> + {
    return 42;
}

// Error: Invalid return type (using punctuation)
fun invalid_return_type3() -> { {
    return 42;
}

// =============================================================================
// 5. MIXED ERRORS (MULTIPLE ISSUES)
// =============================================================================

// Error: Multiple issues - missing semicolon AND invalid expression
fun multiple_errors1() -> i32 {
    return +
}

// Error: Invalid function name AND missing semicolon
fun 456bad_name() -> i32 {
    return 42
}

// Error: Missing parentheses AND invalid return type
fun missing_parens_bad_type -> class {
    return 42;
}

// =============================================================================
// 6. EDGE CASES
// =============================================================================

// Error: Return with no expression but expecting one (non-void function)
fun empty_return_non_void() -> i32 {
    return;
}

// Error: Return statement outside function (top-level)
return 42;

// Error: Nested function declaration (not allowed)
fun outer_function() -> i32 {
    fun inner_function() -> i32 {
        return 1;
    }
    return 2;
}

// Error: Class declaration inside function (not allowed)
fun function_with_class() -> i32 {
    class InnerClass {
    }
    return 42;
}

// Error: Function return arrow inside function body (not allowed)
fun function_with_arrow() -> i32 {
    -> i32
    return 42;
}

// =============================================================================
// 7. COMPLEX EXPRESSION ERRORS (when expression parsing is expanded)
// =============================================================================

// Error: Unclosed parentheses in expression
fun unclosed_paren_expr() -> i32 {
    return (42;
}

// Error: Invalid operator usage
fun invalid_operator_expr() -> i32 {
    return 42 +;
}

// Error: Missing operand
fun missing_operand_expr() -> i32 {
    return + 42;
}

// =============================================================================
// 8. WHITESPACE AND FORMATTING EDGE CASES
// =============================================================================

// Error: Return on separate line without semicolon
fun return_separate_line() -> i32 {
    return
    42
}

// Error: Extra tokens after valid return statement
fun extra_tokens_after_return() -> i32 {
    return 42; extra_token;
}

// This file should generate multiple parsing errors when processed by the Phi parser.
// Each error should be caught and reported with appropriate line and column information.
