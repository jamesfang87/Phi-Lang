// Mixed errors test - combination of different error types
// This tests how well error recovery works with multiple error types

fun test_function_and_variable_errors(bad_param i64) -> i64
    let missing_semicolon: i64 = 42
    let : str = "no name";
    let bad_assignment: i64 100;
    return missing_semicolon;

fun missing_brace_and_semicolons() -> i64 {
    let x: i64 = 10
    if (x > 5) {
        return x
    } else {
        let y: i64 = 20
        return y

fun nested_control_flow_errors() -> i64 {
    let counter: i64 = 0;

    if (incomplete_condition && ) {
        while (counter < 5 {
            for missing_var in [1, counter) {
                counter = counter + 1
            }
        }
    } else invalid_else_clause
        return counter;
}

fun (x: i64, y i64,, z: ) -> invalid_type {
    let result = x + y;

    if result > 10) {
        while (result > 0 {
            result = result - 1
        }
    }

    return result

fun parameter_and_body_mixed_errors missing_param: i64, : str) -> i64
    let a: i64 = 10
    let b i64 = 20;
    let : = 30;

    for i [1, 5) {
        if (i > 2 && ) {
            a = a + i
        } else {
            b = b * i
        // missing closing brace

    return a + b;

fun test_malformed_expressions() -> bool {
    let x: i64 = 10 +;  // incomplete expression
    let y: bool = (x > 5) &&;  // incomplete boolean
    let z: i64 = * 3;  // missing left operand

    if (x >> 5) {  // invalid operator
        while (y || ) {  // incomplete condition
            return true
        }
    } else
        return false;
    // missing closing brace

fun missing_everything() ->
    let
    if ) {
        for in {
            while ) {
                return
            }
        }
    }

fun realistic_mixed_scenario(user_id: i64) -> str {
    let user_name: str = "default"
    let user_score i64 = 0;
    let : bool = false;

    if (user_id > 0 && user_id < 1000 {
        for attempt in [1, 3) {
            if (attempt == 1) {
                user_score = calculate_score(user_id)
            } else {
                user_score = user_score + 10
            }
        }

        while (user_score > 100 {
            user_score = user_score / 2
        }
    } else invalid_branch {
        user_name = "invalid_user"
        return user_name
    }

    return user_name;

fun calculate_score(id: i64) -> i64 {
    return id * 2;
}

fun deeply_nested_errors() -> i64 {
    let level1: i64 = 1;

    if (level1 > 0) {
        let level2 i64 = 2;

        while (level2 < 5 {
            for i in [level2, 10) {
                if (i % 2 == 0 {
                    let level3: = i;

                    while (level3 > 0) {
                        level3 = level3 - 1

                        if (level3 == 1 {
                            return level3
                        }
                    // missing closing brace
                } else {
                    continue  // invalid statement
                }
            // missing closing brace
        // missing closing brace
    }

    return level1;

// Function that should still parse despite errors above
fun recovery_test() -> i64 {
    let good_var: i64 = 42;
    return good_var;
}
