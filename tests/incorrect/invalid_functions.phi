// Invalid function definitions test - all should produce errors

// Missing function name
fun (x: i64, y: i64) -> i64 {
    return x + y;
}

// Invalid function name (starts with number)
fun 123function() -> i64 {
    return 42;
}

// Invalid function name (contains invalid characters)
fun my-function@name() -> i64 {
    return 0;
}

// Missing opening parenthesis
fun missing_open_paren x: i64, y: i64) -> i64 {
    return x * y;
}

// Missing closing parenthesis
fun missing_close_paren(x: i64, y: i64 -> i64 {
    return x + y;
}

// Missing parameter list entirely
fun no_params -> i64 {
    return 100;
}

// Invalid parameter syntax - missing colon
fun bad_param(x i64, y: i64) -> i64 {
    return x + y;
}

// Invalid parameter syntax - missing type
fun missing_param_type(name: , age: i64) -> i64 {
    return age;
}

// Invalid parameter syntax - missing parameter name
fun missing_param_name(: i64, y: str) -> i64 {
    return 0;
}

// Multiple parameter errors
fun multiple_param_errors(i64, : str, bad) -> i64 {
    return 0;
}

// Missing return type arrow but has type
fun missing_arrow() i64 {
    return 42;
}

// Invalid return type arrow
fun invalid_arrow() => i64 {
    return 42;
}

// Missing return type after arrow
fun missing_return_type() -> {
    return 0;
}

// Invalid return type
fun invalid_return_type() -> 123invalid {
    return 0;
}

// Missing function body
fun no_body() -> i64;

// Missing opening brace for body
fun missing_open_brace() -> i64
    return 42;
}

// Missing closing brace for body
fun missing_close_brace() -> i64 {
    return 42;

// Empty parameter list with errors
fun empty_params_error(,) -> i64 {
    return 0;
}

// Trailing comma in parameters
fun trailing_comma(x: i64, y: i64,) -> i64 {
    return x + y;
}

// Multiple commas in parameters
fun multiple_commas(x: i64,, y: i64) -> i64 {
    return x + y;
}

// Missing comma between parameters
fun missing_comma(x: i64 y: i64) -> i64 {
    return x + y;
}

// Complex function with multiple errors
fun complex_errors(: i64, bad_param i64,, missing_type: ) -> invalid_return_type
    let result: i64 = 42;
    return result;

// Function with invalid parameter and missing body
fun param_and_body_errors(x i64, : str) -> i64;

// Nested function definition (not allowed)
fun outer_function() -> i64 {
    fun inner_function() -> i64 {  // This should be caught by block parsing
        return 1;
    }
    return 2;
}

// Function with class definition inside (not allowed)
fun function_with_class() -> i64 {
    class InnerClass {  // This should be caught by block parsing
    }
    return 0;
}

// Function with invalid arrow syntax inside body
fun arrow_in_body() -> i64 {
    -> invalid_usage;  // This should be caught by block parsing
    return 0;
}

// Mixed valid and invalid functions
fun valid_function() -> i64 {
    return 1;
}

fun invalid_after_valid(missing_colon i64) -> i64 {
    return 2;
}

fun another_valid() -> str {
    return "valid";
}

// Function name conflicts with keywords
fun return() -> i64 {
    return 0;
}

fun if() -> i64 {
    return 0;
}

fun while() -> i64 {
    return 0;
}
