// Edge cases test - unusual scenarios that might break parsing

// Empty function body
fun empty_function() {
}

// Function with only comments
fun only_comments() {
    // This function only has comments
    // No actual statements
    // Should this be valid or invalid?
}

// Extremely nested blocks
fun deeply_nested() -> i64 {
    {
        {
            {
                {
                    {
                        let deep: i64 = 42;
                        return deep;
                    }
                }
            }
        }
    }
}

// Very long identifier names
fun extremely_long_function_name_that_goes_on_and_on_and_on_and_never_seems_to_end_but_should_still_be_valid() -> i64 {
    let extremely_long_variable_name_that_also_goes_on_forever_and_ever: i64 = 1;
    return extremely_long_variable_name_that_also_goes_on_forever_and_ever;
}

// Multiple consecutive semicolons
fun multiple_semicolons() -> i64 {
    let x: i64 = 42;;;;;;;
    return x;;;;
}

// Empty parameter lists with whitespace
fun whitespace_params(   ) -> i64 {
    return 0;
}

// Comments in strange places
fun /* comment */ weird_comment_placement /* another */ () /* yet another */ -> /* return type comment */ i64 /* final comment */ {
    let /* variable comment */ x /* colon comment */ : /* type comment */ i64 /* assignment comment */ = /* value comment */ 42 /* semicolon comment */ ;
    return /* return comment */ x /* final comment */ ;
}

// EOF in middle of function
fun incomplete_function() -> i64 {
    let x: i64 = 42;
    // File ends here without closing brace or return

// Malformed numbers and literals
fun bad_literals() -> i64 {
    let bad_int: i64 = 123abc;  // Invalid integer
    let bad_float: float = 3.14.15;  // Double decimal point
    let bad_string: str = "unclosed string;
    let another_bad_string: str = 'single quotes not supported';
    return 0;
}

// Empty string literals
fun empty_strings() -> str {
    let empty: str = "";
    let spaces: str = "   ";
    return empty;
}

// Deeply nested expressions
fun deeply_nested_expr() -> i64 {
    let result: i64 = ((((((((1 + 2) * 3) - 4) / 2) + 1) * 2) - 3) + 5);
    return result;
}

// Many parameters
fun many_parameters(a: i64, b: i64, c: i64, d: i64, e: i64, f: i64, g: i64, h: i64, i: i64, j: i64, k: i64, l: i64, m: i64, n: i64, o: i64, p: i64, q: i64, r: i64, s: i64, t: i64, u: i64, v: i64, w: i64, x: i64, y: i64, z: i64) -> i64 {
    return a + b + c + d + e;
}

// Zero parameters with trailing comma
fun trailing_comma_empty(,) -> i64 {
    return 0;
}

// Multiple return statements
fun multiple_returns() -> i64 {
    return 1;
    return 2;  // Unreachable code
    return 3;  // More unreachable code
}

// Return in middle of block
fun return_in_middle() -> i64 {
    let x: i64 = 10;
    return x;
    let y: i64 = 20;  // Unreachable
    return y;  // Unreachable
}

// Extreme nesting with errors
fun extreme_nesting_with_errors() -> i64 {
    if (true) {
        while (true) {
            for i in [1, 10) {
                if (i > 5) {
                    while (i > 0) {
                        if (i == 3) {
                            for j in [1, i) {
                                return j  // Missing semicolon deep inside
                            }
                        }
                    }
                }
            }
        }
    }
    return 0;
}

// Binary operators without operands
fun missing_operands() -> i64 {
    let x: i64 = + * / - %;  // Chain of operators with no operands
    return x;
}

// Unmatched delimiters
fun unmatched_delimiters() -> i64 {
    let array: i64 = [1, 2, 3);  // Mismatched brackets
    let call: i64 = func(1, 2, 3];  // Mismatched parentheses
    return array;
}

// Comments that look like code
fun comment_code_confusion() -> i64 {
    // let fake_var: int = 42;
    /*
    if (true) {
        return 999;
    }
    */
    let real_var: i64 = 1;
    return real_var;
}

// Keywords as identifiers (should fail)
fun keyword_identifiers() -> i64 {
    let if: i64 = 1;  // 'if' is a keyword
    let while: i64 = 2;  // 'while' is a keyword
    let fun: i64 = 3;  // 'fun' is a keyword
    return if + while + fun;
}

// Empty control structures
fun empty_control_structures() -> i64 {
    if (true) {
    }

    while (false) {
    }

    for i in [1, 1) {
    }

    return 0;
}

// Control structures without braces (if supported)
fun no_brace_control() -> i64 {
    if (true)
        return 1;

    while (false)
        return 2;

    return 0;
}

// Nested function calls with errors
fun nested_calls_with_errors() -> i64 {
    let result: i64 = func1(func2(func3(func4(,))));  // Missing arguments
    return result;
}

// Invalid escape sequences in strings
fun invalid_escapes() -> str {
    let bad_escape: str = "hello\world";  // Invalid escape
    let another_bad: str = "test\q";  // Invalid escape
    return bad_escape;
}

// Very large numbers
fun large_numbers() -> i64 {
    let huge: i64 = 999999999999999999999999999;  // Too large for i64
    let tiny: float = 0.000000000000000000000001;  // Very small float
    return huge;
}

// Incomplete function at end of file
fun incomplete_at_eof() -> i64 {
    let x: i64 = 42;
