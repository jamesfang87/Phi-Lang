// Invalid variable declarations test - all should produce errors

fun test_missing_colon() -> i64 {
    let x i64 = 42;  // Missing colon after 'x'
    let y float = 3.14;  // Missing colon after 'y'
    return x;
}

fun test_missing_identifier() -> i64 {
    let : i64 = 10;  // Missing variable name
    let : str = "hello";  // Missing variable name
    return 0;
}

fun test_missing_type() -> i64 {
    let name: = "John";  // Missing type after colon
    let count: = 25;  // Missing type after colon
    return count;
}

fun test_missing_assignment() -> i64 {
    let value: i64 100;  // Missing '=' operator
    let flag: bool true;  // Missing '=' operator
    return value;
}

fun test_missing_expression() -> i64 {
    let empty: i64 = ;  // Missing initialization expression
    let also_empty: str = ;  // Missing initialization expression
    return empty;
}

fun test_invalid_type_names() -> i64 {
    let bad1: invalidtype = 42;  // Invalid type name
    let bad2: 123type = "test";  // Type name starts with number
    let bad3: i64-type = 15;  // Invalid characters in type name
    return bad1;
}

fun test_invalid_variable_names() -> i64 {
    let 123invalid: i64 = 10;  // Variable name starts with number
    let my-var: i64 = 20;  // Invalid character in variable name
    let var@name: i64 = 30;  // Invalid character in variable name
    return 123invalid;
}

fun test_multiple_errors() -> i64 {
    let : = ;  // Missing identifier, type, and expression
    let bad i64 ;  // Missing colon, assignment, and expression
    let x: 42;  // Missing type and assignment operator
    return 0;
}

fun test_mixed_valid_invalid() -> i64 {
    let good: i64 = 50;  // This should be valid
    let bad i64 = 25;  // Missing colon
    let also_good: str = "valid";  // This should be valid
    let : float = 3.14;  // Missing identifier
    return good;
}

fun test_complex_missing_parts() -> i64 {
    let first;  // Missing colon, type, assignment, and expression
    let second: ;  // Missing type, assignment, and expression
    let third: i64;  // Missing assignment and expression
    let fourth: i64 = ;  // Missing expression only
    return 0;
}
